{
  "openapi": "3.0.0",
  "info": {
    "title": "Time & Wellness API",
    "description": "Comprehensive wellness and productivity management API with AI-powered features, voice processing, social features, and health tracking.",
    "version": "1.0.0",
    "contact": {
      "name": "Time & Wellness Support",
      "email": "support@timewellness.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.timewellness.com",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.timewellness.com",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8787",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "User Management",
      "description": "User profile and account management"
    },
    {
      "name": "Tasks",
      "description": "Task management and Eisenhower matrix"
    },
    {
      "name": "Health",
      "description": "Health tracking and insights"
    },
    {
      "name": "Focus Sessions",
      "description": "Pomodoro timer and focus tracking"
    },
    {
      "name": "Voice Processing",
      "description": "Voice notes and AI transcription"
    },
    {
      "name": "Calendar",
      "description": "Calendar and meeting scheduling"
    },
    {
      "name": "Notifications",
      "description": "Push notifications and alerts"
    },
    {
      "name": "Social",
      "description": "Social features and challenges"
    },
    {
      "name": "Badges",
      "description": "Achievement system and gamification"
    },
    {
      "name": "Student Verification",
      "description": "Student verification and pricing"
    },
    {
      "name": "Localization",
      "description": "Multi-language support"
    },
    {
      "name": "Admin",
      "description": "Administrative functions"
    },
    {
      "name": "Health Monitor",
      "description": "System health and monitoring"
    },
    {
      "name": "Metrics",
      "description": "Analytics and metrics collection"
    },
    {
      "name": "Documentation",
      "description": "API documentation and specifications"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "User already exists"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "responses": {
          "200": {
            "description": "Token refreshed successfully"
          },
          "401": {
            "description": "Invalid refresh token"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user profile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request password reset",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset password with token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8
                  }
                },
                "required": [
                  "token",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/auth/validate": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid"
          },
          "401": {
            "description": "Token is invalid"
          }
        }
      }
    },
    "/api/user/profile": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get user profile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user profile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "preferredLanguage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user/account": {
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete user account",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user/password": {
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 8
                  }
                },
                "required": [
                  "currentPassword",
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully"
          },
          "400": {
            "description": "Invalid current password"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user/avatar": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Upload user avatar",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "avatar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar uploaded successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get user tasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "completed",
                "cancelled"
              ]
            }
          },
          {
            "name": "priority",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "urgent"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create new task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "urgent"
                    ]
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "urgency": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 4
                  },
                  "importance": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 4
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "urgent"
                    ]
                  },
                  "completed": {
                    "type": "boolean"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/{id}/complete": {
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Mark task as complete",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task marked as complete"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/tasks/stats": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task statistics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Task statistics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health Monitor"
        ],
        "summary": "Get system health status",
        "responses": {
          "200": {
            "description": "Health status retrieved successfully"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/api/health/detailed": {
      "get": {
        "tags": [
          "Health Monitor"
        ],
        "summary": "Get detailed system health",
        "responses": {
          "200": {
            "description": "Detailed health status retrieved successfully"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/api/health/ready": {
      "get": {
        "tags": [
          "Health Monitor"
        ],
        "summary": "Kubernetes readiness probe",
        "responses": {
          "200": {
            "description": "Service is ready"
          },
          "503": {
            "description": "Service is not ready"
          }
        }
      }
    },
    "/api/health/live": {
      "get": {
        "tags": [
          "Health Monitor"
        ],
        "summary": "Kubernetes liveness probe",
        "responses": {
          "200": {
            "description": "Service is alive"
          }
        }
      }
    },
    "/api/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get system metrics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Metrics"
        ],
        "summary": "Record system metric",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "number"
                  },
                  "tags": {
                    "type": "object"
                  },
                  "timestamp": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metric recorded successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/metrics/analytics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get system analytics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/metrics/realtime": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get real-time metrics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Real-time metrics retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/metrics/summary": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get metrics summary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics summary retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/metrics/prometheus": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get Prometheus-compatible metrics",
        "description": "Returns metrics in Prometheus exposition format for monitoring systems",
        "responses": {
          "200": {
            "description": "Prometheus metrics retrieved successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "# HELP time_wellness_application_info Application information\n# TYPE time_wellness_application_info gauge\ntime_wellness_application_info{version=\"1.0.0\",environment=\"production\"} 1"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/openapi": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Get OpenAPI specification (JSON)",
        "responses": {
          "200": {
            "description": "OpenAPI specification retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "OpenAPI 3.0 specification"
                }
              }
            }
          }
        }
      }
    },
    "/api/openapi/yaml": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Get OpenAPI specification (YAML)",
        "responses": {
          "200": {
            "description": "OpenAPI specification in YAML format",
            "content": {
              "text/yaml": {
                "schema": {
                  "type": "string",
                  "description": "OpenAPI 3.0 specification in YAML format"
                }
              }
            }
          }
        }
      }
    },
    "/api/openapi/json": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Get OpenAPI specification (JSON)",
        "responses": {
          "200": {
            "description": "OpenAPI specification in JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "OpenAPI 3.0 specification in JSON format"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "subscriptionStatus": {
            "type": "string",
            "enum": [
              "free",
              "premium",
              "student"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "urgent"
            ]
          },
          "completed": {
            "type": "boolean"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "urgency": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4
          },
          "importance": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4
          },
          "eisenhowerQuadrant": {
            "type": "string",
            "enum": [
              "do",
              "decide",
              "delegate",
              "delete"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}